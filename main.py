# main.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List
import uuid
import threading
import logging
import os

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Hugging Face API
import requests
import json

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ Redis)
tasks = {}

# === –ú–æ–¥–µ–ª–∏ Pydantic ===
class DDLStatement(BaseModel):
    statement: str

class QueryItem(BaseModel):
    queryid: str
    query: str
    runquantity: int

class NewTaskRequest(BaseModel):
    url: str
    ddl: List[DDLStatement]
    queries: List[QueryItem]
    
class TaskIdResponse(BaseModel):
    taskid: str

class StatusResponse(BaseModel):
    status: str

class OptimizationResult(BaseModel):
    ddl: List[DDLStatement]
    migrations: List[DDLStatement]
    queries: List[QueryItem]

# === –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ===
@app.post("/new", response_model=TaskIdResponse)
def create_task(request: NewTaskRequest):
    task_id = str(uuid.uuid4())
    tasks[task_id] = {"status": "RUNNING", "result": None}

    thread = threading.Thread(target=hf_optimize, args=(task_id, request))
    thread.start()

    return {"taskid": task_id}

@app.get("/status", response_model=StatusResponse)
def get_status(task_id: str):
    if task_id not in tasks:
        raise HTTPException(status_code=404, detail="Task not found")
    return {"status": tasks[task_id]["status"]}

    
@app.get("/getresult", response_model=OptimizationResult)
def get_result(task_id: str):
    task = tasks.get(task_id)
    if not task:
        raise HTTPException(status_code=404, detail="Task not found")
    if task["status"] == "FAILED":
        error_detail = task.get("result", {}).get("error", "Unknown error")
        raise HTTPException(status_code=500, detail=error_detail)
    if task["status"] != "DONE":
        raise HTTPException(status_code=400, detail="Task not ready")
    
    return task["result"]   


# === –õ–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hugging Face ===
def hf_optimize(task_id: str, request: NewTaskRequest):
    """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Hugging Face Inference API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {task_id}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ–º–ø—Ç
        ddl_statements = "\n".join([d.statement for d in request.ddl])
        query_examples = "\n".join([f"{q.queryid}: {q.query} (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {q.runquantity} —Ä–∞–∑)" for q in request.queries[:3]])

        prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Data Lakehouse –Ω–∞ –±–∞–∑–µ Trino + Iceberg + S3.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π DDL –∏ —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã.
–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑:
- –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –¥–∂–æ–π–Ω—è—Ç—Å—è
- –ü–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—é
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

–í–ê–ñ–ù–û:
1. –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ DDL –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: CREATE SCHEMA <catalog>.<new_schema>
2. –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: catalog.schema.table
3. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "ddl": [{{"statement": "..."}}, ...],
  "migrations": [{{"statement": "..."}}, ...],
  "queries": [{{"queryid": "...", "query": "..."}}, ...]
}}

DDL:
{ddl_statements}

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
{query_examples}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
"""

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å
        API_URL = "https://api-inference.huggingface.co/models/google/gemma-7b-it"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        HF_TOKEN = os.getenv("HF_TOKEN")
        if not HF_TOKEN:
            raise Exception("HF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        headers = {
            "Authorization": f"Bearer {HF_TOKEN}",
            "Content-Type": "application/json"
        }

        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 2048,
                "temperature": 0.3,
                "return_full_text": False
            }
        }

        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Hugging Face...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=60)

        if response.status_code != 200:
            error_msg = f"‚ùå HF API –≤–µ—Ä–Ω—É–ª {response.status_code}: {response.text}"
            logger.error(error_msg)
            raise Exception(error_msg)

        result_text = response.json()[0]["generated_text"].strip()
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏:")
        logger.info(result_text[:500] + "...")

        # –£–±–∏—Ä–∞–µ–º Markdown-–æ–±—ë—Ä—Ç–∫–∏
        if result_text.startswith("```json"):
            result_text = result_text[7:].split("```")[0].strip()

        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            result = json.loads(result_text)
            logger.info("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.error(f"–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–ª–∏—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å:\n{result_text}")
            raise Exception(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not isinstance(result.get("ddl"), list):
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∞ ddl")
        if not isinstance(result.get("migrations"), list):
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∞ migrations")
        if not isinstance(result.get("queries"), list):
            raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∞ queries")

        tasks[task_id]["result"] = result
        tasks[task_id]["status"] = "DONE"
        logger.info(f"üéâ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_id}: {str(e)}")
        tasks[task_id]["status"] = "FAILED"
        tasks[task_id]["result"] = {
            "error": str(e),
            "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω."
        }
